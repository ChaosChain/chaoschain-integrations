[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "chaoschain-integrations"
version = "0.1.0"
description = "Partner integrations (adapters) for ChaosChain SDK - storage, compute, and attestation providers"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "ChaosChain Labs", email = "dev@chaoschain.io" }
]
keywords = ["chaoschain", "blockchain", "agent", "ai", "storage", "compute", "attestation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "chaoschain-sdk>=0.2.0",
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "httpx>=0.27",
    "python-dotenv>=1.0",
    "structlog>=24.0",
]

[project.optional-dependencies]
# Individual adapter extras
zerog = ["grpcio>=1.65.0", "grpcio-tools>=1.65.0", "protobuf>=4.25"]
eigen = ["grpcio>=1.65.0", "grpcio-tools>=1.65.0"]
cre = ["httpx>=0.27"]
pinata = ["httpx>=0.27"]

# Convenience bundles
all = ["chaoschain-integrations[zerog,eigen,cre,pinata]"]
dev = [
    "pytest>=7.4",
    "pytest-asyncio>=0.23",
    "pytest-mock>=3.12",
    "pytest-cov>=4.1",
    "mypy>=1.7",
    "ruff>=0.1.0",
    "black>=24.0",
    "isort>=5.12",
    "pre-commit>=3.5",
    "types-protobuf>=4.24",
]

[project.urls]
Homepage = "https://github.com/ChaosChain/chaoschain-integrations"
Documentation = "https://docs.chaoschain.io/integrations"
Repository = "https://github.com/ChaosChain/chaoschain-integrations"
Issues = "https://github.com/ChaosChain/chaoschain-integrations/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["chaoschain_integrations*"]
namespaces = true

[tool.setuptools.package-data]
chaoschain_integrations = ["py.typed", "**/*.proto"]

# ===== RUFF =====
[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# ===== BLACK =====
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'

# ===== ISORT =====
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

# ===== MYPY =====
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "google.protobuf.*",
]
ignore_missing_imports = true

# ===== PYTEST =====
[tool.pytest.ini_options]
testpaths = ["chaoschain_integrations"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=chaoschain_integrations",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests with mocks",
    "integration: Integration tests requiring sidecars",
    "contract: Contract tests for adapter conformance",
]
asyncio_mode = "auto"

# ===== COVERAGE =====
[tool.coverage.run]
source = ["chaoschain_integrations"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/sidecars/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "\\.\\.\\.",
]

