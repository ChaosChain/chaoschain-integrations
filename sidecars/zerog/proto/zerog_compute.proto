syntax = "proto3";

package zerog.compute.v1;

option go_package = "github.com/chaoschain/chaoschain-integrations/sidecars/zerog/pkg/compute";

// ZeroG Compute Service
service ZeroGCompute {
  // Submit compute job
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
  
  // Get job status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  
  // Get job result
  rpc GetResult(GetResultRequest) returns (GetResultResponse);
  
  // Cancel job
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
  
  // Health check
  rpc Health(HealthRequest) returns (HealthResponse);
}

message SubmitJobRequest {
  string task_type = 1;
  string model = 2;
  map<string, string> inputs = 3;
  string verification = 4;
  string docker_image = 5;
  map<string, string> resources = 6;
}

message SubmitJobResponse {
  string job_id = 1;
  string status = 2;
  int64 submitted_at = 3;
}

message GetStatusRequest {
  string job_id = 1;
}

message GetStatusResponse {
  string job_id = 1;
  string status = 2;
  float progress = 3;
  string message = 4;
  int64 updated_at = 5;
}

message GetResultRequest {
  string job_id = 1;
}

message GetResultResponse {
  string job_id = 1;
  string status = 2;
  string output = 3;  // JSON-encoded output
  TEEAttestation attestation = 4;
  ComputeMetadata metadata = 5;
  int64 completed_at = 6;
}

message CancelJobRequest {
  string job_id = 1;
}

message CancelJobResponse {
  string job_id = 1;
  bool cancelled = 2;
  string message = 3;
}

message TEEAttestation {
  string tee_report = 1;
  string quote = 2;
  map<string, string> evidence = 3;
}

message ComputeMetadata {
  string docker_digest = 1;
  string enclave_pubkey = 2;
  string execution_hash = 3;
  string signed_result = 4;
  map<string, string> extra = 5;
}

message HealthRequest {}

message HealthResponse {
  string status = 1;
  string version = 2;
}

